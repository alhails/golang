// Code generated by "go-option -type encOpts"; DO NOT EDIT.
// Install go-option by "go get install github.com/searKing/golang/tools/go-option"

package prettyjson

// A EncOptsOption sets options.
type EncOptsOption interface {
	apply(*encOpts)
}

// EmptyEncOptsOption does not alter the configuration. It can be embedded
// in another structure to build custom options.
//
// This API is EXPERIMENTAL.
type EmptyEncOptsOption struct{}

func (EmptyEncOptsOption) apply(*encOpts) {}

// EncOptsOptionFunc wraps a function that modifies encOpts into an
// implementation of the EncOptsOption interface.
type EncOptsOptionFunc func(*encOpts)

func (f EncOptsOptionFunc) apply(do *encOpts) {
	f(do)
}

// ApplyOptions call apply() for all options one by one
func (o *encOpts) ApplyOptions(options ...EncOptsOption) *encOpts {
	for _, opt := range options {
		if opt == nil {
			continue
		}
		opt.apply(o)
	}
	return o
}

// withEncOpts sets encOpts.
func withEncOpts(v encOpts) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		*o = v
	})
}

// WithEncOptsEscapeHTML sets escapeHTML in encOpts.
// escapeHTML causes '<', '>', and '&' to be escaped in JSON strings.
func WithEncOptsEscapeHTML(v bool) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.escapeHTML = v
	})
}

// WithEncOptsTruncateBytes sets truncateBytes in encOpts.
// truncate bytes to this length
func WithEncOptsTruncateBytes(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateBytes = v
	})
}

// WithEncOptsTruncateBytesIfMoreThan sets truncateBytesIfMoreThan in encOpts.
// truncate bytes to this length if more than this length
func WithEncOptsTruncateBytesIfMoreThan(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateBytesIfMoreThan = v
	})
}

// WithEncOptsTruncateString sets truncateString in encOpts.
// truncate string to this length
func WithEncOptsTruncateString(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateString = v
	})
}

// WithEncOptsTruncateStringIfMoreThan sets truncateStringIfMoreThan in encOpts.
// truncate string to this length if more than this length
func WithEncOptsTruncateStringIfMoreThan(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateStringIfMoreThan = v
	})
}

// WithEncOptsTruncateMap sets truncateMap in encOpts.
// truncate map to this length
func WithEncOptsTruncateMap(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateMap = v
	})
}

// WithEncOptsTruncateMapIfMoreThan sets truncateMapIfMoreThan in encOpts.
// truncate map to this length if more than this length
func WithEncOptsTruncateMapIfMoreThan(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateMapIfMoreThan = v
	})
}

// WithEncOptsTruncateSliceOrArray sets truncateSliceOrArray in encOpts.
// truncate slice or array to this length
func WithEncOptsTruncateSliceOrArray(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateSliceOrArray = v
	})
}

// WithEncOptsTruncateSliceOrArrayIfMoreThan sets truncateSliceOrArrayIfMoreThan in encOpts.
// truncate slice or array to this length if more than this length
func WithEncOptsTruncateSliceOrArrayIfMoreThan(v int) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateSliceOrArrayIfMoreThan = v
	})
}

// WithEncOptsTruncateUrl sets truncateUrl in encOpts.
// truncate query and fragment in url
func WithEncOptsTruncateUrl(v bool) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.truncateUrl = v
	})
}

// WithEncOptsForceLongUrl sets forceLongUrl in encOpts.
// force long url
func WithEncOptsForceLongUrl(v bool) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.forceLongUrl = v
	})
}

// WithEncOptsOmitEmpty sets omitEmpty in encOpts.
// omit empty value
func WithEncOptsOmitEmpty(v bool) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.omitEmpty = v
	})
}

// WithEncOptsOmitStatistics sets omitStatistics in encOpts.
// omit statistics info
func WithEncOptsOmitStatistics(v bool) EncOptsOption {
	return EncOptsOptionFunc(func(o *encOpts) {
		o.omitStatistics = v
	})
}
